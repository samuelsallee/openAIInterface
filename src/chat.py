# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/chat.ipynb (unless otherwise specified).

__all__ = ['ParseInputError', 'parseEvent', 'talkWithOpenAI', 'EventInput', 'chat']

# Cell
import os, openai, requests
from awsSchema.apigateway import Event, Response
from copy import deepcopy
from beartype import beartype


# Cell
class ParseInputError(Exception):
    pass

# Cell
EventInput = dict

@beartype
def parseEvent(event):
    eventCopy = deepcopy(event)
    body = Event.parseBody(eventCopy)

    try:
        inputText = body['inputText']
    except KeyError:
        raise ParseInputError('inputText is not in body')

    return inputText

@beartype
def talkWithOpenAI(inputText: str)->str:
    headers = {"Authorization":"Bearer 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"}
    event = {"model": "text-davinci-003", "prompt": inputText, "temperature": 0.2, "max_tokens": 100}
    print('input text is', inputText)
    r = requests.post('https://api.openai.com/v1/completions', headers=headers, json=event)

    return r.json()["choices"][0]["text"]

# Cell
def chat(event, *args):
    try:
        inputText = parseEvent(event)
        response = talkWithOpenAI(inputText)
        return Response.returnSuccess(body = response)
    except Exception as e:
        return Response.returnError(message=str(e))