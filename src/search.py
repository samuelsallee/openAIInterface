# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/search.ipynb (unless otherwise specified).

__all__ = ['logSearch', 'logValidation', 'logTransform', 'logConfig', 'logParseResult', 'ResponseParsingError',
           'QueryParsingError', 'ConfigLoadingError', 'SearchError', 'search', 'cache', 'lambdaSearch']

# Cell
from .getEnv import *
from .getConfig import getConfig
from sentry_sdk.integrations.aws_lambda import AwsLambdaIntegration
from sentry_sdk import add_breadcrumb, capture_exception
from awsSchema.apigateway import Response, Event, Headers
from beartype import beartype
from diskcache import Cache
from datetime import datetime
import boto3, sentry_sdk, json

# Cell
sentry_sdk.init(
    dsn="https://3523e6e8c5e14d33bbc9f64965af96c1@o839457.ingest.sentry.io/5862083",
    integrations=[AwsLambdaIntegration()]
  )

def logSearch(message:str, data:(list,dict)):
  add_breadcrumb(
    category='search',
    data=data,
    level='info',
    message=message
  )
def logValidation(message:str, data:(list,dict)):
  add_breadcrumb(
    category='validation',
    data=data,
    level='info',
    message=message
  )
def logTransform(message:str, data:(list,dict)):
  add_breadcrumb(
    category='transformation',
    data=data,
    level='info',
    message=message
  )
def logConfig(message:str, data:(list,dict)):
  add_breadcrumb(
    category='loadingConfig',
    data=data,
    level='info',
    message=message
  )
def logParseResult(message:str, data:(list,dict)):
  add_breadcrumb(
    category='parseResult',
    data=data,
    level='info',
    message=message
  )

# Cell
class ResponseParsingError(Exception):
  pass

class QueryParsingError(Exception):
  pass

class ConfigLoadingError(Exception):
  pass

class SearchError(Exception):
  pass

# Cell
cache:Cache = Cache('/tmp/')

@beartype
@cache.memoize(tag='search',expire=900)
def search(query:str, config:dict, fuzzyAmount = 0)->dict:
  client = boto3.client('cloudsearchdomain', endpoint_url=SEARCHENDPOINT)

  #log
  logSearch('searching at the following config', {'query':query, 'config':config, 'endpoint': SEARCHENDPOINT})

  fuzzySuffix = f'~{fuzzyAmount}' if fuzzyAmount else ""

  response = client.search(
    query = query + fuzzySuffix,
    **config
    )
  logSearch('searchResponse: ', response)
  return response

# Cell
def lambdaSearch(event, *args):
  ## get query
  try:
    logValidation('parsing query', event)
    query = Event.parseQuery(event)['query']
    logValidation('parsing success', {'query':query})
  except KeyError as e:
    capture_exception(QueryParsingError(e))
    return Response.returnError(f'missing or wrong parameters \n{e}')
  except Exception as e:
    capture_exception(QueryParsingError(e))
    return Response.returnError(f'unknown error while parsing queryparam \n {e}')

  try:
    logConfig('loading config', {})
    config = getConfig()
    logConfig('config loaded', config)
  except Exception as e:
    capture_exception(ConfigLoadingError(e))
    return Response.returnError(f'unable to get config {e}')

  try:
    response = search(query=query, config=config)
  except Exception as e:
    capture_exception(SearchError(e))
    return Response.returnError(f'''
      error while searching, please check if config is correct,
      dont forget to invalidate after updating config {e}
      ''')

  try:
    logParseResult('parsing result', response)
    results = response['hits']['hit']
    logParseResult('result hits', results)
    fields = [result['fields'] for result in results]
    logParseResult('fields', fields)
    filteredFields = [{'cprcode': int(field['cprcode'][0]), 'pr_engname': field['pr_engname'][0] } for field in fields]
    logParseResult('filtered fields', filteredFields)
    return Response.returnSuccess(filteredFields)

  except Exception as e:
    capture_exception(ResponseParsingError(e))
    return Response.returnError(f'parsing result error, plz contact developer {datetime.now().timestamp()}')



